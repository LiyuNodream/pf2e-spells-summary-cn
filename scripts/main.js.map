{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///../../../../foundryVTT-projects/@utils/module.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/path.ts","webpack:///./src/sheet.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/settings.ts","webpack:///./src/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export let MODULE_ID = ''\r\n\r\nexport function setModuleID(id: string) {\r\n    if (!MODULE_ID) MODULE_ID = id\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\n\r\nexport function getSettingLocalizationPath(...path: string[]) {\r\n    return `${MODULE_ID}.settings.${path.join('.')}`\r\n}\r\n\r\nexport function flagsUpdatePath(...path: string[]) {\r\n    return `flags.${MODULE_ID}.${path.join('/')}`\r\n}\r\n\r\nexport function templatePath(...path: string[]) {\r\n    path = path.filter(x => typeof x === 'string')\r\n    return `modules/${MODULE_ID}/templates/${path.join('/')}`\r\n}\r\n\r\nexport function imagePath(...path: string[]) {\r\n    return `modules/${MODULE_ID}/images/${path.join('/')}`\r\n}\r\n","import { templatePath } from '@utils/foundry/path'\r\nimport { getSetting } from '@utils/foundry/settings'\r\nimport { MODULE_ID } from './main'\r\n\r\nexport async function onRenderCharacterSheetPF2e(sheet: CharacterSheetPF2e, html: JQuery, data: CharacterSheetData) {\r\n    const actor = sheet.actor\r\n    if (actor.pack || !actor.id || !game.actors.has(actor.id)) return\r\n\r\n    const tab = getSpellcastingTab(html)\r\n\r\n    if (getProperty(sheet, `modules.${MODULE_ID}.toggled`)) tab.addClass('toggled')\r\n\r\n    addNavEvent(html, sheet)\r\n    await addSummaryTab(html, data, sheet)\r\n\r\n    if (tab.hasClass('toggled') && tab.hasClass('active')) {\r\n        sheet._restoreScrollPositions(html)\r\n    }\r\n}\r\n\r\nfunction addNavEvent(html: JQuery, sheet: CharacterSheetPF2e) {\r\n    getSpellcastingNav(html).on('click', event => onSpellcastingBtnToggle(event, html, sheet))\r\n}\r\n\r\nasync function addSummaryTab(html: JQuery, data: CharacterSheetData, sheet: CharacterSheetPF2e) {\r\n    const tab = getSpellcastingTab(html)\r\n\r\n    const template = await renderTemplate(templatePath('sheet.hbs'), {\r\n        entries: getEntries(data),\r\n        rituals: getRituals(data),\r\n        focusPool: data.data.resources.focus,\r\n        editable: data.editable,\r\n    })\r\n\r\n    tab.append(template)\r\n    addSummaryEvents(html, sheet)\r\n}\r\n\r\nfunction onSpellcastingBtnToggle(event: JQuery.ClickEvent, html: JQuery, sheet: CharacterSheetPF2e) {\r\n    event.preventDefault()\r\n\r\n    const tab = getSpellcastingTab(html)\r\n\r\n    if (tab.hasClass('active')) {\r\n        tab.toggleClass('toggled')\r\n        tab.scrollTop(0)\r\n        setProperty(sheet, `modules.${MODULE_ID}.toggled`, tab.hasClass('toggled'))\r\n    }\r\n}\r\n\r\nfunction getRituals(data: CharacterSheetData) {\r\n    const rituals: SpellcastingLevelRitual[] = []\r\n\r\n    data.spellcastingEntries.forEach(entry => {\r\n        if (!entry.isRitual || !entry.hasCollection || !entry.levels.some(x => x.active.some(y => y !== null))) return\r\n\r\n        const entryId = entry.id\r\n        const entryName = entry.name\r\n\r\n        entry.levels.forEach(slot => {\r\n            if (!slot.active.length) return\r\n\r\n            const activeSpells = slot.active.filter(active => active) as ActiveSpell[]\r\n\r\n            rituals.push(\r\n                ...activeSpells.flatMap((active, i) => ({\r\n                    id: active.spell.id,\r\n                    name: active.spell.name,\r\n                    img: active.spell.img,\r\n                    level: slot.level,\r\n                    slotId: i,\r\n                    entryId,\r\n                    entryName,\r\n                    time: active.spell.system.time.value,\r\n                    secondary: active.spell.system.secondarycasters.value,\r\n                }))\r\n            )\r\n        })\r\n    })\r\n\r\n    rituals.sort((a, b) => a.level - b.level)\r\n\r\n    return rituals\r\n}\r\n\r\nfunction getEntries(data: CharacterSheetData) {\r\n    const focusPool = data.data.resources.focus\r\n    const entries: SpellcastingLevelEntry[] = []\r\n\r\n    data.spellcastingEntries.forEach(entry => {\r\n        if (entry.isRitual || !entry.hasCollection || !entry.levels.some(x => x.active.some(y => y !== null))) return\r\n\r\n        const check = entry.statistic.check\r\n        const dc = entry.statistic.dc\r\n        const isPrepared = !!entry.isPrepared\r\n        const isFlexible = !!entry.isFlexible\r\n        const isFocus = !!entry.isFocusPool\r\n        const isSpontaneous = !!entry.isSpontaneous\r\n        const isInnate = !!entry.isInnate\r\n        const entryName = entry.name\r\n        const entryId = entry.id\r\n        const isCharge = entry.system.prepared.value === 'charge'\r\n        const isStaff = getProperty(entry, 'flags.pf2e-staves.staveID') !== undefined\r\n        const charges = { value: getProperty<number>(entry, 'flags.pf2e-staves.charges') ?? 0, max: 0 }\r\n\r\n        entry.levels.forEach(slot => {\r\n            if (!slot.active.length) return\r\n\r\n            const activeSpells = slot.active.filter(active => active) as ActiveSpell[]\r\n\r\n            entries[slot.level] ??= {\r\n                level: slot.level,\r\n                isCantrip: slot.isCantrip,\r\n                spells: [],\r\n            }\r\n\r\n            entries[slot.level]!.spells.push(\r\n                ...activeSpells.flatMap((active, i) => ({\r\n                    id: active.spell.id,\r\n                    name: active.spell.name,\r\n                    img: active.spell.img,\r\n                    uses: active.uses,\r\n                    isVirtual: !!active.virtual,\r\n                    icon: active.spell.system.time.value,\r\n                    entryId,\r\n                    entryName,\r\n                    slotId: i,\r\n                    range: active.spell.system.range.value,\r\n                    isPrepared,\r\n                    isFlexible,\r\n                    isInnate,\r\n                    isSpontaneous,\r\n                    isFocus,\r\n                    isCharge,\r\n                    isStaff,\r\n                    dc,\r\n                    check,\r\n                    parentUses: isCharge ? charges : slot.uses,\r\n                    expended: slot.isCantrip\r\n                        ? false\r\n                        : isCharge\r\n                        ? charges.value < slot.level\r\n                        : isPrepared && !isFlexible\r\n                        ? !!active.expended\r\n                        : isFocus\r\n                        ? focusPool.value <= 0\r\n                        : isInnate && active.uses?.value != null\r\n                        ? active.uses.value <= 0\r\n                        : (isSpontaneous || isFlexible) && slot.uses?.value != null\r\n                        ? slot.uses.value <= 0\r\n                        : false,\r\n                    order: isCharge ? 0 : isPrepared ? 1 : isFocus ? 2 : isInnate ? 3 : isSpontaneous ? 4 : 5,\r\n                }))\r\n            )\r\n        })\r\n    })\r\n\r\n    const sort: (a: SpellcastingLevelSpell, b: SpellcastingLevelSpell) => number = getSetting('order')\r\n        ? (a, b) => (a.order === b.order ? a.name.localeCompare(b.name) : a.order - b.order)\r\n        : (a, b) => a.name.localeCompare(b.name)\r\n    entries.forEach(entry => entry.spells.sort(sort))\r\n\r\n    return entries\r\n}\r\n\r\nfunction addSummaryEvents(html: JQuery<HTMLElement>, sheet: CharacterSheetPF2e) {\r\n    const summary = getSpellcastingSummarySection(html)\r\n\r\n    const inputs = summary.find<HTMLInputElement>('.spell-range .uses .spell-slots-input input')\r\n    inputs.on('change', event => onUsesInputChange(event, sheet))\r\n    inputs.on('focus', onUsesInputFocus)\r\n    inputs.on('blur', onUsesInputBlur)\r\n\r\n    summary.find('.cast-spell').on('click', event => onCastSpell(event, sheet))\r\n    summary.find('.item-toggle-prepare').on('click', event => onTogglePrepare(event, sheet))\r\n    summary.find('.focus-pips').on('click contextmenu', event => onToggleFocusPool(event, sheet))\r\n    summary.find('.spell-slots-increment-reset').on('click', event => onSlotsReset(event, sheet))\r\n    summary.find('.item-image').on('click', event => onItemToChat(event, sheet))\r\n    summary.find('.item-name > h4').on('click', event => onToggleSummary(event, sheet))\r\n}\r\n\r\nasync function onToggleSummary(event: JQuery.ClickEvent<any, any, HTMLElement>, sheet: CharacterSheetPF2e) {\r\n    const item = event.currentTarget.closest<HTMLElement>('.item')!\r\n    await sheet.itemRenderer.toggleSummary(item)\r\n}\r\n\r\nasync function onItemToChat(event: JQuery.ClickEvent<any, any, HTMLElement>, sheet: CharacterSheetPF2e) {\r\n    const itemId = $(event.currentTarget).closest('.item').attr('data-item-id')\r\n    const item = sheet.actor.items.get(itemId ?? '', { strict: true })\r\n    if (!item || (item.isOfType('physical') && !item.isIdentified)) return\r\n    await item.toMessage(event)\r\n}\r\n\r\nfunction onChargeReset(sheet: CharacterSheetPF2e, entryId: string) {\r\n    const original = getSpellcastingOriginalSection(sheet.element)\r\n    const entry = original.find(`.item-container.spellcasting-entry[data-item-id=${entryId}]`)\r\n    const btn = entry.find('.spell-ability-data .statistic-values a.pf2e-staves-charge')\r\n    btn[0]?.click()\r\n}\r\n\r\nfunction onSlotsReset(event: JQuery.ClickEvent<any, any, HTMLElement>, sheet: CharacterSheetPF2e) {\r\n    event.preventDefault()\r\n\r\n    const { itemId, level, staff } = $(event.currentTarget).data()\r\n    if (!itemId) return\r\n\r\n    if (staff) {\r\n        onChargeReset(sheet, itemId)\r\n        return\r\n    }\r\n\r\n    const item = sheet.actor.items.get(itemId)\r\n    if (!item) return\r\n\r\n    if (item.isOfType('spellcastingEntry')) {\r\n        const { system } = item.toObject()\r\n        if (!system.slots) return\r\n\r\n        const slotLevel = (goesToEleven(level) ? `slot${level}` : 'slot0') as SlotKey\r\n        system.slots[slotLevel].value = system.slots[slotLevel].max\r\n        item.update({ system })\r\n    } else if (item.isOfType('spell')) {\r\n        const max = item.system.location.uses?.max\r\n        if (!max) return\r\n        item.update({ 'system.location.uses.value': max })\r\n    }\r\n}\r\n\r\nfunction goesToEleven(value: number): value is ZeroToEleven {\r\n    return value >= 0 && value <= 11\r\n}\r\n\r\nfunction onUsesInputChange(event: JQuery.ChangeEvent<any, any, HTMLInputElement>, sheet: CharacterSheetPF2e) {\r\n    event.preventDefault()\r\n\r\n    const { itemId, itemProperty } = event.currentTarget.dataset\r\n    if (!itemId || !itemProperty) return\r\n\r\n    const value = Math.max(event.currentTarget.valueAsNumber, 0)\r\n    sheet.actor.updateEmbeddedDocuments('Item', [{ _id: itemId, [itemProperty]: value }])\r\n}\r\n\r\nfunction onToggleFocusPool(event: JQuery.TriggeredEvent<any, any, HTMLElement>, sheet: CharacterSheetPF2e) {\r\n    event.preventDefault()\r\n    const change = event.type === 'click' ? 1 : -1\r\n    const points = (sheet.actor.system.resources.focus?.value ?? 0) + change\r\n    sheet.actor.update({ 'system.resources.focus.value': points })\r\n}\r\n\r\nfunction onTogglePrepare(event: JQuery.ClickEvent<any, any, HTMLElement>, sheet: CharacterSheetPF2e) {\r\n    event.preventDefault()\r\n    const { slotLevel, slotId, entryId, expendedState } = $(event.currentTarget).closest('.item').data()\r\n    const collection = sheet.actor.spellcasting.collections.get(entryId)\r\n    collection?.setSlotExpendedState(slotLevel ?? 0, slotId ?? 0, expendedState !== true)\r\n}\r\n\r\nfunction onCastSpell(event: JQuery.ClickEvent<any, any, HTMLElement>, sheet: CharacterSheetPF2e) {\r\n    event.preventDefault()\r\n    const { itemId, slotLevel, slotId, entryId } = $(event.currentTarget).closest('.item').data()\r\n\r\n    const collection = sheet.actor.spellcasting.collections.get(entryId, { strict: true })\r\n    if (!collection) return\r\n\r\n    const spell = collection.get(itemId, { strict: true })\r\n    if (!spell) return\r\n\r\n    collection.entry.cast(spell, { slot: slotId, level: slotLevel })\r\n}\r\n\r\nfunction onUsesInputFocus(event: JQuery.FocusEvent<any, any, HTMLInputElement>) {\r\n    event.preventDefault()\r\n    event.currentTarget.closest('.item')?.classList.add('hover')\r\n}\r\n\r\nfunction onUsesInputBlur(event: JQuery.BlurEvent<any, any, HTMLInputElement>) {\r\n    event.preventDefault()\r\n    event.currentTarget.closest('.item')?.classList.remove('hover')\r\n}\r\n\r\nfunction getSpellcastingNav(html: JQuery) {\r\n    return html.find('nav.sheet-navigation .item[data-tab=spellcasting]')\r\n}\r\n\r\nfunction getSpellcastingTab(html: JQuery) {\r\n    return html.find('section.sheet-body .sheet-content > .tab[data-tab=spellcasting]')\r\n}\r\n\r\nfunction getSpellcastingOriginalSection(html: JQuery) {\r\n    return getSpellcastingTab(html).find('.directory-list.spellcastingEntry-list')\r\n}\r\n\r\nfunction getSpellcastingSummarySection(html: JQuery) {\r\n    return getSpellcastingTab(html).find('.directory-list.summary')\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\nimport { getSettingLocalizationPath } from '@utils/foundry/path'\r\n\r\nexport function getSetting<T extends any>(key: string) {\r\n    return game.settings.get(MODULE_ID, key) as T\r\n}\r\n\r\nexport function setSetting(key: string, value: unknown) {\r\n    return game.settings.set(MODULE_ID, key, value)\r\n}\r\n\r\n/**\r\n * options.scope = 'world'\r\n *\r\n * options.config = false\r\n */\r\nexport function registerSetting<\r\n    TType extends number | string | boolean | object | Function,\r\n    TChoices extends Record<string, unknown> | undefined\r\n>(options: Omit<SettingRegistration<TType, TChoices>, 'choices'> & { choices?: string[] | Record<string, unknown> }) {\r\n    const name = options.name\r\n    options.scope = options.scope ?? 'world'\r\n    options.config = options.config ?? false\r\n    if (options.config) {\r\n        options.name = getSettingLocalizationPath(name, 'name')\r\n        options.hint = getSettingLocalizationPath(name, 'hint')\r\n    }\r\n    if (Array.isArray(options.choices)) {\r\n        options.choices = options.choices.reduce((choices, choice) => {\r\n            choices[choice] = getSettingLocalizationPath(name, 'choices', choice)\r\n            return choices\r\n        }, {} as Record<string, unknown>)\r\n    }\r\n    game.settings.register<TType, TChoices>(MODULE_ID, name, options as SettingRegistration<TType, TChoices>)\r\n}\r\n\r\n/**\r\n * options.restricted = true\r\n *\r\n * options.icon = 'fas fa-cogs'\r\n */\r\nexport function registerSettingMenu(\r\n    options: RequiredBy<Partial<Omit<SettingSubmenuConfig, 'type'>>, 'name'> & { type: ConstructorOf<FormApplication> }\r\n) {\r\n    const name = options.name\r\n    options.name = getSettingLocalizationPath('menus', name, 'name')\r\n    options.label = getSettingLocalizationPath('menus', name, 'label')\r\n    options.hint = getSettingLocalizationPath('menus', name, 'hint')\r\n    options.restricted = options.restricted ?? true\r\n    options.icon = options.icon ?? 'fas fa-cogs'\r\n    game.settings.registerMenu(MODULE_ID, name, options as SettingSubmenuConfig)\r\n}\r\n\r\nexport function getCombatTrackerConfig() {\r\n    return game.settings.get('core', 'combatTrackerConfig') as { resource: string; skipDefeated: boolean }\r\n}\r\n","import { setModuleID } from '@utils/module'\r\nimport { registerSetting } from '@utils/foundry/settings'\r\nimport { onRenderCharacterSheetPF2e } from './sheet'\r\n\r\nexport const MODULE_ID = 'pf2e-spells-summary'\r\nsetModuleID(MODULE_ID)\r\n\r\nHooks.on('renderCharacterSheetPF2e', onRenderCharacterSheetPF2e)\r\n\r\nHooks.once('ready', () => {\r\n    registerSetting({\r\n        name: 'order',\r\n        type: Boolean,\r\n        default: false,\r\n        config: true,\r\n        scope: 'client',\r\n        onChange: refreshSheets,\r\n    })\r\n})\r\n\r\nfunction refreshSheets() {\r\n    Object.values(ui.windows).forEach(win => win instanceof ActorSheet && win.actor.type === 'character' && win.render())\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","path","join","getRituals","data","rituals","spellcastingEntries","forEach","entry","isRitual","hasCollection","levels","some","x","active","y","entryId","id","entryName","name","slot","length","activeSpells","filter","push","flatMap","i","spell","img","level","slotId","time","system","value","secondary","secondarycasters","sort","a","b","getEntries","focusPool","resources","focus","entries","check","statistic","dc","isPrepared","isFlexible","isFocus","isFocusPool","isSpontaneous","isInnate","isCharge","prepared","isStaff","undefined","getProperty","charges","max","isCantrip","spells","uses","isVirtual","virtual","icon","range","parentUses","expended","order","game","settings","localeCompare","onUsesInputFocus","event","preventDefault","currentTarget","closest","classList","add","onUsesInputBlur","remove","getSpellcastingTab","html","find","refreshSheets","values","ui","windows","win","ActorSheet","actor","type","render","Hooks","on","async","sheet","pack","actors","has","tab","addClass","getSpellcastingNav","hasClass","toggleClass","scrollTop","setProperty","onSpellcastingBtnToggle","addNavEvent","template","renderTemplate","templatePath","editable","append","summary","getSpellcastingSummarySection","inputs","itemId","itemProperty","dataset","Math","valueAsNumber","updateEmbeddedDocuments","_id","onUsesInputChange","slotLevel","$","collection","spellcasting","collections","strict","cast","onCastSpell","expendedState","setSlotExpendedState","onTogglePrepare","change","points","update","onToggleFocusPool","staff","original","getSpellcastingOriginalSection","element","btn","click","onChargeReset","item","items","isOfType","toObject","slots","location","onSlotsReset","attr","isIdentified","toMessage","onItemToChat","itemRenderer","toggleSummary","onToggleSummary","addSummaryEvents","addSummaryTab","_restoreScrollPositions","once","options","scope","config","hint","Array","isArray","choices","reduce","choice","register","registerSetting","Boolean","default","onChange"],"sourceRoot":""}