{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///../../../../foundryVTT-projects/@utils/module.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/path.ts","webpack:///./src/sheet.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/settings.ts","webpack:///./src/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export let MODULE_ID = ''\r\nexport let TYPE = 'module'\r\n\r\nexport function setModuleID(id: string, isSystem = false) {\r\n    if (!MODULE_ID) MODULE_ID = id\r\n    TYPE = isSystem ? 'system' : 'module'\r\n}\r\n","import { MODULE_ID, TYPE } from '@utils/module'\r\n\r\nexport function getSettingLocalizationPath(...path: string[]) {\r\n    return `${MODULE_ID}.settings.${path.join('.')}`\r\n}\r\n\r\nexport function flagsUpdatePath(...path: string[]) {\r\n    return `flags.${MODULE_ID}.${path.join('/')}`\r\n}\r\n\r\nexport function templatePath(...path: string[]) {\r\n    path = path.filter(x => typeof x === 'string')\r\n    return `${TYPE}s/${MODULE_ID}/templates/${path.join('/')}`\r\n}\r\n\r\nexport function imagePath(...path: string[]) {\r\n    return `${TYPE}s/${MODULE_ID}/images/${path.join('/')}`\r\n}\r\n","import { templatePath } from '@utils/foundry/path'\r\nimport { getSetting } from '@utils/foundry/settings'\r\nimport { MODULE_ID } from './main'\r\n\r\nexport async function onRenderCharacterSheetPF2e(sheet: CharacterSheetPF2e, html: JQuery, data: CharacterSheetData) {\r\n    const actor = sheet.actor\r\n    if (actor.pack || !actor.id || !game.actors.has(actor.id)) return\r\n\r\n    const tab = getSpellcastingTab(html)\r\n\r\n    if (getProperty(sheet, `modules.${MODULE_ID}.toggled`)) tab.addClass('toggled')\r\n\r\n    addNavEvent(html, sheet)\r\n    await addSummaryTab(html, data, sheet)\r\n\r\n    if (tab.hasClass('toggled') && tab.hasClass('active')) {\r\n        sheet._restoreScrollPositions(html)\r\n    }\r\n}\r\n\r\nfunction addNavEvent(html: JQuery, sheet: CharacterSheetPF2e) {\r\n    getSpellcastingNav(html).on('click', event => onSpellcastingBtnToggle(event, html, sheet))\r\n}\r\n\r\nasync function addSummaryTab(html: JQuery, data: CharacterSheetData, sheet: CharacterSheetPF2e) {\r\n    const tab = getSpellcastingTab(html)\r\n\r\n    const template = await renderTemplate(templatePath('sheet.hbs'), {\r\n        entries: getEntries(data),\r\n        rituals: getRituals(data),\r\n        focusPool: data.data.resources.focus,\r\n        editable: data.editable,\r\n    })\r\n\r\n    tab.append(template)\r\n    addSummaryEvents(html, sheet)\r\n}\r\n\r\nfunction onSpellcastingBtnToggle(event: JQuery.ClickEvent, html: JQuery, sheet: CharacterSheetPF2e) {\r\n    event.preventDefault()\r\n\r\n    const tab = getSpellcastingTab(html)\r\n\r\n    if (tab.hasClass('active')) {\r\n        tab.toggleClass('toggled')\r\n        tab.scrollTop(0)\r\n        setProperty(sheet, `modules.${MODULE_ID}.toggled`, tab.hasClass('toggled'))\r\n    }\r\n}\r\n\r\nfunction getRituals(data: CharacterSheetData) {\r\n    const rituals: SpellcastingLevelRitual[] = []\r\n\r\n    data.spellcastingEntries.forEach(entry => {\r\n        if (!entry.isRitual || !entry.hasCollection || !entry.levels.some(x => x.active.some(y => y !== null))) return\r\n\r\n        const entryId = entry.id\r\n        const entryName = entry.name\r\n\r\n        entry.levels.forEach(slot => {\r\n            if (!slot.active.length) return\r\n\r\n            const activeSpells = slot.active.filter(active => active) as ActiveSpell[]\r\n\r\n            rituals.push(\r\n                ...activeSpells.flatMap((active, i) => ({\r\n                    id: active.spell.id,\r\n                    name: active.spell.name,\r\n                    img: active.spell.img,\r\n                    level: slot.level,\r\n                    slotId: i,\r\n                    entryId,\r\n                    entryName,\r\n                    time: active.spell.system.time.value,\r\n                    secondary: active.spell.system.secondarycasters.value,\r\n                }))\r\n            )\r\n        })\r\n    })\r\n\r\n    rituals.sort((a, b) => a.level - b.level)\r\n\r\n    return rituals\r\n}\r\n\r\nconst AMPED_REGEX = /\\((amp|psi|psy|psychic|amped)\\)/i\r\n\r\nfunction getEntries(data: CharacterSheetData) {\r\n    const focusPool = data.data.resources.focus\r\n    const entries: SpellcastingLevelEntry[] = []\r\n\r\n    data.spellcastingEntries.forEach(entry => {\r\n        if (entry.isRitual || !entry.hasCollection || !entry.levels.some(x => x.active.some(y => y !== null))) return\r\n\r\n        const check = entry.statistic.check\r\n        const dc = entry.statistic.dc\r\n        const isPrepared = !!entry.isPrepared\r\n        const isFlexible = !!entry.isFlexible\r\n        const isFocus = !!entry.isFocusPool\r\n        const isSpontaneous = !!entry.isSpontaneous\r\n        const isInnate = !!entry.isInnate\r\n        const entryName = entry.name\r\n        const entryId = entry.id\r\n        const isCharge = entry.system?.prepared?.value === 'charge'\r\n        const isStaff = getProperty(entry, 'flags.pf2e-staves.staveID') !== undefined\r\n        const charges = { value: getProperty<number>(entry, 'flags.pf2e-staves.charges') ?? 0, max: 0 }\r\n\r\n        entry.levels.forEach(slot => {\r\n            if (!slot.active.length || slot.uses?.max === 0) return\r\n\r\n            const isCantrip = slot.isCantrip\r\n            const activeSpells = slot.active.filter(active => active) as ActiveSpell[]\r\n\r\n            entries[slot.level] ??= {\r\n                level: slot.level,\r\n                isCantrip,\r\n                spells: [],\r\n            }\r\n\r\n            entries[slot.level]!.spells.push(\r\n                ...activeSpells\r\n                    .flatMap((active, i) => {\r\n                        if (active.uses?.max === 0) return\r\n                        return {\r\n                            id: active.spell.id,\r\n                            name: active.spell.name,\r\n                            img: active.spell.img,\r\n                            uses: active.uses,\r\n                            isVirtual: !!active.virtual,\r\n                            icon: active.spell.system.time.value,\r\n                            entryId,\r\n                            entryName,\r\n                            slotId: i,\r\n                            range: active.spell.system.range.value,\r\n                            isPrepared,\r\n                            isFlexible,\r\n                            isInnate,\r\n                            isSpontaneous,\r\n                            isFocus,\r\n                            isCharge,\r\n                            isStaff,\r\n                            isAmpedCantrip: isCantrip && isFocus ? AMPED_REGEX.test(active.spell.name) : false,\r\n                            dc,\r\n                            check,\r\n                            parentUses: isCharge ? charges : slot.uses,\r\n                            expended: slot.isCantrip\r\n                                ? false\r\n                                : isCharge\r\n                                ? charges.value < slot.level\r\n                                : isPrepared && !isFlexible\r\n                                ? !!active.expended\r\n                                : isFocus\r\n                                ? focusPool.value <= 0\r\n                                : isInnate && active.uses?.value != null\r\n                                ? active.uses.value <= 0\r\n                                : (isSpontaneous || isFlexible) && slot.uses?.value != null\r\n                                ? slot.uses.value <= 0\r\n                                : false,\r\n                            order: isCharge ? 0 : isPrepared ? 1 : isFocus ? 2 : isInnate ? 3 : isSpontaneous ? 4 : 5,\r\n                        }\r\n                    })\r\n                    .filter(Boolean)\r\n            )\r\n        })\r\n    })\r\n\r\n    const sort: (a: SpellcastingLevelSpell, b: SpellcastingLevelSpell) => number = getSetting('order')\r\n        ? (a, b) => (a.order === b.order ? a.name.localeCompare(b.name) : a.order - b.order)\r\n        : (a, b) => a.name.localeCompare(b.name)\r\n    entries.forEach(entry => entry.spells.sort(sort))\r\n\r\n    return entries\r\n}\r\n\r\nfunction addSummaryEvents(html: JQuery<HTMLElement>, sheet: CharacterSheetPF2e) {\r\n    const summary = getSpellcastingSummarySection(html)\r\n\r\n    const inputs = summary.find<HTMLInputElement>('.spell-range .uses .spell-slots-input input')\r\n    inputs.on('change', event => onUsesInputChange(event, sheet))\r\n    inputs.on('focus', onUsesInputFocus)\r\n    inputs.on('blur', onUsesInputBlur)\r\n\r\n    summary.find('.cast-spell').on('click', event => onCastSpell(event, sheet))\r\n    summary.find('.item-toggle-prepare').on('click', event => onTogglePrepare(event, sheet))\r\n    summary.find('.focus-pips').on('click contextmenu', event => onToggleFocusPool(event, sheet))\r\n    summary.find('.spell-slots-increment-reset').on('click', event => onSlotsReset(event, sheet))\r\n    summary.find('.item-image').on('click', event => onItemToChat(event, sheet))\r\n    summary.find('.item-name > h4').on('click', event => onToggleSummary(event, sheet))\r\n}\r\n\r\nasync function onToggleSummary(event: JQuery.ClickEvent<any, any, HTMLElement>, sheet: CharacterSheetPF2e) {\r\n    const item = event.currentTarget.closest<HTMLElement>('.item')!\r\n    await sheet.itemRenderer.toggleSummary(item)\r\n}\r\n\r\nasync function onItemToChat(event: JQuery.ClickEvent<any, any, HTMLElement>, sheet: CharacterSheetPF2e) {\r\n    const itemId = $(event.currentTarget).closest('.item').attr('data-item-id')\r\n    const item = sheet.actor.items.get(itemId ?? '', { strict: true })\r\n    if (!item || (item.isOfType('physical') && !item.isIdentified)) return\r\n    await item.toMessage(event)\r\n}\r\n\r\nfunction onChargeReset(sheet: CharacterSheetPF2e, entryId: string) {\r\n    const original = getSpellcastingOriginalSection(sheet.element)\r\n    const entry = original.find(`.item-container.spellcasting-entry[data-item-id=${entryId}]`)\r\n    const btn = entry.find('.spell-ability-data .statistic-values a.pf2e-staves-charge')\r\n    btn[0]?.click()\r\n}\r\n\r\nfunction onSlotsReset(event: JQuery.ClickEvent<any, any, HTMLElement>, sheet: CharacterSheetPF2e) {\r\n    event.preventDefault()\r\n\r\n    const { itemId, level, staff } = $(event.currentTarget).data()\r\n    if (!itemId) return\r\n\r\n    if (staff) {\r\n        onChargeReset(sheet, itemId)\r\n        return\r\n    }\r\n\r\n    const item = sheet.actor.items.get(itemId)\r\n    if (!item) return\r\n\r\n    if (item.isOfType('spellcastingEntry')) {\r\n        // @ts-expect-error\r\n        const { system } = item.toObject()\r\n        if (!system.slots) return\r\n\r\n        const slotLevel = (goesToEleven(level) ? `slot${level}` : 'slot0') as SlotKey\r\n        system.slots[slotLevel].value = system.slots[slotLevel].max\r\n        item.update({ system })\r\n    } else if (item.isOfType('spell')) {\r\n        const max = item.system.location.uses?.max\r\n        if (!max) return\r\n        item.update({ 'system.location.uses.value': max })\r\n    }\r\n}\r\n\r\nfunction goesToEleven(value: number): value is ZeroToEleven {\r\n    return value >= 0 && value <= 11\r\n}\r\n\r\nfunction onUsesInputChange(event: JQuery.ChangeEvent<any, any, HTMLInputElement>, sheet: CharacterSheetPF2e) {\r\n    event.preventDefault()\r\n\r\n    const { itemId, itemProperty } = event.currentTarget.dataset\r\n    if (!itemId || !itemProperty) return\r\n\r\n    const value = Math.max(event.currentTarget.valueAsNumber, 0)\r\n    sheet.actor.updateEmbeddedDocuments('Item', [{ _id: itemId, [itemProperty]: value }])\r\n}\r\n\r\nfunction onToggleFocusPool(event: JQuery.TriggeredEvent<any, any, HTMLElement>, sheet: CharacterSheetPF2e) {\r\n    event.preventDefault()\r\n    const change = event.type === 'click' ? 1 : -1\r\n    const points = (sheet.actor.system.resources.focus?.value ?? 0) + change\r\n    sheet.actor.update({ 'system.resources.focus.value': points })\r\n}\r\n\r\nfunction onTogglePrepare(event: JQuery.ClickEvent<any, any, HTMLElement>, sheet: CharacterSheetPF2e) {\r\n    event.preventDefault()\r\n    const { slotLevel, slotId, entryId, expendedState } = $(event.currentTarget).closest('.item').data()\r\n    const collection = sheet.actor.spellcasting.collections.get(entryId)\r\n    collection?.setSlotExpendedState(slotLevel ?? 0, slotId ?? 0, expendedState !== true)\r\n}\r\n\r\nfunction onCastSpell(event: JQuery.ClickEvent<any, any, HTMLElement>, sheet: CharacterSheetPF2e) {\r\n    event.preventDefault()\r\n    const { itemId, slotLevel, slotId, entryId } = $(event.currentTarget).closest('.item').data()\r\n\r\n    const collection = sheet.actor.spellcasting.collections.get(entryId, { strict: true })\r\n    if (!collection) return\r\n\r\n    const spell = collection.get(itemId, { strict: true })\r\n    if (!spell) return\r\n\r\n    collection.entry.cast(spell, { slot: slotId, level: slotLevel })\r\n}\r\n\r\nfunction onUsesInputFocus(event: JQuery.FocusEvent<any, any, HTMLInputElement>) {\r\n    event.preventDefault()\r\n    event.currentTarget.closest('.item')?.classList.add('hover')\r\n}\r\n\r\nfunction onUsesInputBlur(event: JQuery.BlurEvent<any, any, HTMLInputElement>) {\r\n    event.preventDefault()\r\n    event.currentTarget.closest('.item')?.classList.remove('hover')\r\n}\r\n\r\nfunction getSpellcastingNav(html: JQuery) {\r\n    return html.find('nav.sheet-navigation .item[data-tab=spellcasting]')\r\n}\r\n\r\nfunction getSpellcastingTab(html: JQuery) {\r\n    return html.find('section.sheet-body .sheet-content > .tab[data-tab=spellcasting]')\r\n}\r\n\r\nfunction getSpellcastingOriginalSection(html: JQuery) {\r\n    return getSpellcastingTab(html).find('.directory-list.spellcastingEntry-list')\r\n}\r\n\r\nfunction getSpellcastingSummarySection(html: JQuery) {\r\n    return getSpellcastingTab(html).find('.directory-list.summary')\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\nimport { getSettingLocalizationPath } from '@utils/foundry/path'\r\n\r\nexport function getSetting<T extends any>(key: string) {\r\n    return game.settings.get(MODULE_ID, key) as T\r\n}\r\n\r\nexport function setSetting(key: string, value: unknown) {\r\n    return game.settings.set(MODULE_ID, key, value)\r\n}\r\n\r\n/**\r\n * options.scope = 'world'\r\n *\r\n * options.config = false\r\n */\r\nexport function registerSetting<TChoices extends Record<string, unknown> | undefined>(\r\n    options: Omit<SettingRegistration<TChoices>, 'choices'> & { choices?: string[] | Record<string, unknown>; name: string }\r\n) {\r\n    const name = options.name\r\n    options.scope = options.scope ?? 'world'\r\n    options.config = options.config ?? false\r\n    if (options.config) {\r\n        options.name = getSettingLocalizationPath(name, 'name')\r\n        options.hint = getSettingLocalizationPath(name, 'hint')\r\n    }\r\n    if (Array.isArray(options.choices)) {\r\n        options.choices = options.choices.reduce((choices, choice) => {\r\n            choices[choice] = getSettingLocalizationPath(name, 'choices', choice)\r\n            return choices\r\n        }, {} as Record<string, unknown>)\r\n    }\r\n    game.settings.register<TChoices>(MODULE_ID, name, options as SettingRegistration<TChoices>)\r\n}\r\n\r\n/**\r\n * options.restricted = true\r\n *\r\n * options.icon = 'fas fa-cogs'\r\n */\r\nexport function registerSettingMenu(\r\n    options: RequiredBy<Partial<Omit<SettingSubmenuConfig, 'type'>>, 'name'> & { type: ConstructorOf<FormApplication> }\r\n) {\r\n    const name = options.name\r\n    options.name = getSettingLocalizationPath('menus', name, 'name')\r\n    options.label = getSettingLocalizationPath('menus', name, 'label')\r\n    options.hint = getSettingLocalizationPath('menus', name, 'hint')\r\n    options.restricted = options.restricted ?? true\r\n    options.icon = options.icon ?? 'fas fa-cogs'\r\n    game.settings.registerMenu(MODULE_ID, name, options as SettingSubmenuConfig)\r\n}\r\n\r\nexport function getCombatTrackerConfig() {\r\n    return game.settings.get('core', 'combatTrackerConfig') as { resource: string; skipDefeated: boolean }\r\n}\r\n","import { setModuleID } from '@utils/module'\r\nimport { registerSetting } from '@utils/foundry/settings'\r\nimport { onRenderCharacterSheetPF2e } from './sheet'\r\n\r\nexport const MODULE_ID = 'pf2e-spells-summary'\r\nsetModuleID(MODULE_ID)\r\n\r\nHooks.on('renderCharacterSheetPF2e', onRenderCharacterSheetPF2e)\r\n\r\nHooks.once('ready', () => {\r\n    registerSetting({\r\n        name: 'order',\r\n        type: Boolean,\r\n        default: false,\r\n        config: true,\r\n        scope: 'client',\r\n        onChange: refreshSheets,\r\n    })\r\n})\r\n\r\nfunction refreshSheets() {\r\n    Object.values(ui.windows).forEach(win => win instanceof ActorSheet && win.actor.type === 'character' && win.render())\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","path","join","getRituals","data","rituals","spellcastingEntries","forEach","entry","isRitual","hasCollection","levels","some","x","active","y","entryId","id","entryName","name","slot","length","activeSpells","filter","push","flatMap","i","spell","img","level","slotId","time","system","value","secondary","secondarycasters","sort","a","b","AMPED_REGEX","getEntries","focusPool","resources","focus","entries","check","statistic","dc","isPrepared","isFlexible","isFocus","isFocusPool","isSpontaneous","isInnate","isCharge","prepared","isStaff","undefined","getProperty","charges","max","uses","isCantrip","spells","isVirtual","virtual","icon","range","isAmpedCantrip","test","parentUses","expended","order","Boolean","game","settings","localeCompare","onUsesInputFocus","event","preventDefault","currentTarget","closest","classList","add","onUsesInputBlur","remove","getSpellcastingTab","html","find","refreshSheets","values","ui","windows","win","ActorSheet","actor","type","render","isSystem","setModuleID","Hooks","on","async","sheet","pack","actors","has","tab","addClass","getSpellcastingNav","hasClass","toggleClass","scrollTop","setProperty","onSpellcastingBtnToggle","addNavEvent","template","renderTemplate","templatePath","editable","append","summary","getSpellcastingSummarySection","inputs","itemId","itemProperty","dataset","Math","valueAsNumber","updateEmbeddedDocuments","_id","onUsesInputChange","slotLevel","$","collection","spellcasting","collections","strict","cast","onCastSpell","expendedState","setSlotExpendedState","onTogglePrepare","change","points","update","onToggleFocusPool","staff","original","getSpellcastingOriginalSection","element","btn","click","onChargeReset","item","items","isOfType","toObject","slots","location","onSlotsReset","attr","isIdentified","toMessage","onItemToChat","itemRenderer","toggleSummary","onToggleSummary","addSummaryEvents","addSummaryTab","_restoreScrollPositions","once","options","scope","config","hint","Array","isArray","choices","reduce","choice","register","registerSetting","default","onChange"],"sourceRoot":""}